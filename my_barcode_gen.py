import barcode
from barcode.writer import ImageWriter
import random
import os
import csv
from PIL import Image, ImageDraw, ImageFont
import matplotlib.font_manager as fm

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output
output_dir = "barcodes"
os.makedirs(output_dir, exist_ok=True)

csv_filename = "barcode_data.csv"

    # ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö OCR ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Q ‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡∏ß
try:
    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Q ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    ocr_fonts = ["Arial", "Tahoma", "Verdana", "Helvetica", "DejaVu Sans", "Liberation Sans", 
                "DejaVu Sans Mono", "Liberation Mono", "Courier New", "OCR-A", "OCR-B"]
    font_path = None
    
    for font_name in ocr_fonts:
        try:
            font_path = fm.findfont(font_name)
            if font_path:
                print(f"‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {font_name}")
                break
        except:
            continue
    
    if font_path:
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö three-segment code
        font = ImageFont.truetype(font_path, 80)
    else:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô")
        font = ImageFont.load_default()
except Exception as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {e}")
    font = ImageFont.load_default()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á 3-segment code ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö OCR
def gen_three_segment_code():
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà OCR ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ Q ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á Q ‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡∏ß
    ocr_friendly_chars = 'ABCDEFGHJKLMNPQRSTUVWXY3456789'
    part1 = ''.join(random.choices(ocr_friendly_chars, k=3))
    part2 = ''.join(random.choices(ocr_friendly_chars, k=4))
    part3 = ''.join(random.choices(ocr_friendly_chars, k=3))
    # ‡πÉ‡∏ä‡πâ dash ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    return f"{part1} - {part2} - {part3}"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV
with open(csv_filename, mode='w', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(["Tracking Number", "Three-Code", "Filename"])

    for i in range(1, 201):
        try:
            tracking_number = f"TH{1000000000 + i}"
            three_code = gen_three_segment_code()

            # ‡πÉ‡∏ä‡πâ barcode ‡∏à‡∏≤‡∏Å tracking number
            barcode_class = barcode.get_barcode_class('code128')
            barcode_obj = barcode_class(tracking_number, writer=ImageWriter())

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å barcode ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏° segment code
            temp_path = os.path.join(output_dir, f"{tracking_number}_raw")
            temp_filename = f"{temp_path}.png"

            # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á barcode ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            barcode_options = {
                "module_width": 0.6,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á barcode
                "module_height": 30,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á barcode
                "font_size": 18,          # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ï‡πâ barcode
                "text_distance": 7,       # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á barcode ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                "quiet_zone": 6,          # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö barcode
                "write_text": True        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ï‡πâ barcode
            }
            
            barcode_obj.save(temp_path, options=barcode_options)

            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û barcode
            barcode_img = Image.open(temp_filename)
            width, height = barcode_img.size

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö three-segment code
            padding_top = 100  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            padding_side = 40  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
            
            final_width = width + padding_side * 2
            final_height = height + padding_top
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            final_img = Image.new("RGB", (final_width, final_height), (255, 255, 255))
            draw = ImageDraw.Draw(final_img)
            
            # ‡∏ß‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° three-code
            try:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PIL ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
                bbox = draw.textbbox((0, 0), three_code, font=font)
                text_width = bbox[2] - bbox[0]
            except AttributeError:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PIL ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤
                try:
                    text_width, _ = draw.textsize(three_code, font=font)
                except:
                    text_width = width * 0.8  # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤
            
            # ‡∏ß‡∏≤‡∏î three-code ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
            text_x = (final_width - text_width) / 2
            text_y = 20  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            draw.text((text_x, text_y), three_code, font=font, fill=(0, 0, 0))
            
            # ‡πÅ‡∏õ‡∏∞ barcode ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô)
            barcode_x = padding_side
            barcode_y = text_y + 80
            final_img.paste(barcode_img, (barcode_x, barcode_y))

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            final_filename = os.path.join(output_dir, f"{tracking_number}.png")
            final_img.save(final_filename, dpi=(300, 300))

            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            try:
                os.remove(temp_filename)
            except:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {temp_filename}")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV
            writer.writerow([tracking_number, three_code, final_filename])
            print(f"[{i}/200] ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß: {final_filename}")
            
        except Exception as e:
            print(f"[{i}/200] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

print(f"\nüìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {csv_filename}")